version: '3.7'

services:
  order_app:
    container_name: order_app
    image: order_app_image
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/src
    ports:
      - "8000:8000"
    depends_on:
      - order_app_db
      - prometheus
      - jaeger
      - loki
    networks:
      - ums-back-office  

  order_app_db:
    container_name: order_app_db
    hostname: order_app_db
    image: library/postgres:14.1
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
      - POSTGRES_DB=app
    volumes:
      - app_pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ums-back-office  

  payment_app:
    container_name: payment_app
    image: payment_app_image
    env_file:
      - .env
    build:
      context: ../payment_service
      dockerfile: Dockerfile
    volumes:
      - ../payment_service/:/src
    ports:
      - "8001:8001"
    depends_on:
      - payment_app_db
    networks:
      - ums-back-office

  payment_app_db:
    container_name: payment_app_db
    hostname: payment_app_db
    image: library/postgres:14.1
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
      - POSTGRES_DB=payment_app_db
    volumes:
      - payment_app_pg_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - ums-back-office
  
  inventory_app:
    container_name: inventory_app
    image: inventory_app_image
    env_file:
      - .env
    build:
      context: ../inventory_service
      dockerfile: Dockerfile
    volumes:
      - ../inventory_service/:/src
    ports:
      - "8002:8002"
    depends_on:
      - inventory_app_db
    networks:
      - ums-back-office

  inventory_app_db:
    container_name: inventory_app_db
    hostname: inventory_app_db
    image: library/postgres:14.1
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
      - POSTGRES_DB=inventory_app_db
    volumes:
      - inventory_app_pg_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - ums-back-office

  delivery_app:
    container_name: delivery_app
    image: delivery_app_image
    env_file:
      - .env
    build:
      context: ../delivery_service
      dockerfile: Dockerfile
    volumes:
      - ../delivery_service/:/src
    ports:
      - "8003:8003"
    depends_on:
      - delivery_app_db
    networks:
      - ums-back-office

  delivery_app_db:
    container_name: delivery_app_db
    hostname: delivery_app_db
    image: library/postgres:14.1
    environment:
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=app
      - POSTGRES_DB=delivery_app_db
    volumes:
      - delivery_app_pg_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - ums-back-office

  app_redis:
    image: redis:6.2-alpine
    hostname: redis
    container_name: app_redis
    command:
      - 'redis-server'
      - '--requirepass myStrongPassword'
    ports:
      - 6379:6379
    networks:
      - ums-back-office

  order_worker:
    container_name: order_worker
    build: .
    command: celery -A src.create_order worker --loglevel=info --queues q01
    volumes:
      - .:/order_app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - order_app
      - order_app_db
      - app_redis
    networks:
      - ums-back-office

  payment_worker:
    container_name: payment_worker
    build: ../payment_service
    command: celery -A src.create_payment worker --loglevel=info --queues q02
    volumes:
      - ../payment_service:/payment_app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DATABASE_URL_PAYMENT=${DATABASE_URL_PAYMENT}
    depends_on:
      - payment_app
      - payment_app_db
      - app_redis
    networks:
      - ums-back-office

  inventory_worker:
    container_name: inventory_worker
    build: ../inventory_service
    command: celery -A src.update_inventory worker --loglevel=info --queues q03
    volumes:
      - ../inventory_service:/inventory_app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DATABASE_URL_INVENTORY=${DATABASE_URL_INVENTORY}
      - CORS_HEADERS=${CORS_HEADERS}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - inventory_app
      - inventory_app_db
      - app_redis
    networks:
      - ums-back-office

  delivery_worker:
    container_name: delivery_worker
    build: ../delivery_service
    command: celery -A src.make_delivery worker --loglevel=info --queues q04
    volumes:
      - ../delivery_service:/delivery_app
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DATABASE_URL_DELIVERY=${DATABASE_URL_DELIVERY}
    depends_on:
      - delivery_app
      - delivery_app_db
      - app_redis
    networks:
      - ums-back-office

  flower:
    container_name: flower
    build: .
    command: celery -A src.create_order flower --port=5555
    ports:
      - 5556:5555
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - order_app
      - app_redis
      - order_worker
    networks:
      - ums-back-office
  
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - ums-back-office

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "14250:14250"
    networks:
      - ums-back-office

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - jaeger
      - loki
    networks:
      - ums-back-office

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ums-back-office
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.82.0
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"  # Default OTLP gRPC port
      - "4318:4318"  # Default OTLP HTTP port
      - "9464:9464"
    depends_on:
      - loki
      - jaeger
      - prometheus
    networks:
      - ums-back-office

volumes:
  app_pg_data:
    driver: "local"
  payment_app_pg_data:
    driver: "local"
  inventory_app_pg_data:
    driver: "local"
  delivery_app_pg_data:
    driver: "local"
  grafana_data:
  
networks:
  ums-back-office:
  default:
    external: true
    name: app_main